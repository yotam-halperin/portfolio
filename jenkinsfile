pipeline {
    agent any


    // environment {
    //     IP = '18.135.117.62' // JENKINS_URL
    // }
    
    stages {

        // 1. Clone
        stage('Clone SCM'){
            steps {
                deleteDir()
                checkout scm
            }
        }

        stage('env') {
            steps {
                sh 'printenv'
            }
        }

        // 2. Build (Docker image)
        stage('Build') {
            steps{
                sh "docker build -t crossyroad ./app/"
            }
        }

        // 3. Run the architecture
        stage('Compose up'){
            steps{
                sh "docker compose down -v"
                sh "docker compose build"
                sh "docker compose up -d"
            }
        }

        // 4. End-to-end test (docker-compose up, POST, GET, DELETE, GET, docker-compose down...) [`main` & `feature/*`]
        stage('E2E test'){
            when { anyOf { 
                branch 'master';
                expression {env.BRANCH_NAME =~ /^feature\/.*/} 
            }}
            steps{
                sh "bash scripts/e2e.sh $JENKINS_URL"
            }
        }

        // 5. Destroy architecture
        stage('Compose down'){
            steps{
                sh "docker compose down -v"
            }
        }

        // // 6. Tag [`main` only]
        // stage('TAG'){
        //     steps{

        //     }
        // }

        // // 7. Publish [`main` only]
        // stage('Publish') {
        //     when { branch 'master' }
        //     steps {
        //         script{
        //             docker.withRegistry('https://644435390668.dkr.ecr.eu-west-2.amazonaws.com', 'ecr:eu-west-2:644435390668') {
        //                 docker.image("crossyroad:latest").push()
        //             }
        //         }
        //     }
	    // }

        // // 8. Deploy [`main` only] (update image tag in production machines)
        // stage('Deploy'){
        //     steps{

        //     }
        // }

        // stage('release publish') {
        //     when {  expression { env.BRANCH_NAME =~ /^release\/.*/ }    }
        //     steps {
        //         script{
        //             withCredentials([gitUsernamePassword(credentialsId: "${GITLAB_CREDS}", gitToolName: 'git-tool')]) {
        //                 env.DIG=sh(returnStdout: true, script: 'git fetch --all --tags').trim()
        //             }
        //             env.DIG=sh(returnStdout: true, script: 'git describe --tags | tr "-" "\n" | head -1').trim()
        //             if ("$DIG" == '' || !"$DIG".startsWith(env.BRANCH_NAME) ) { env.DIG=env.BRANCH_NAME+".0" }
        //             env.NEW= changeLastChar("$DIG")
                    
        //             sh "echo $DIG"
        //             sh "echo $NEW"

        //             withMaven(maven: 'mvn', mavenSettingsConfig: 'suggest') {
        //             sh "mvn versions:set -DnewVersion=$NEW"
        //             sh 'mvn deploy'
        //             withCredentials([gitUsernamePassword(credentialsId: "${GITLAB_CREDS}", gitToolName: 'git-tool')]) {
        //                 env.DIG=sh(returnStdout: true, script: "git tag $NEW").trim()
        //                 env.DIG=sh(returnStdout: true, script: 'git push --tags').trim()
        //             }
        //         }
        //         }
        //     }
        // }
     
    }
}