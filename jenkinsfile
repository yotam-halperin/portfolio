def changeLastChar(string) {
    def lastChar = string[string.length() - 1]
    def newChar = lastChar.toInteger()+1
    def newString = string.substring(0, string.length() - 1) + newChar

    return newString
}

//////////////////////////////////////////////////////////////////////////////

pipeline {
    agent any
    
    environment {
        GITHUB_CREDS = 'github'
        DOCKERHUB_REPO = "yotamhalperin7/crossyroad"
        DOCKERHUB_CREDS = "dockerhubaccount" 
        YH_MYSQL_PASSWORD = "pass"
    }

// CHECK ABOUT IT!!!!!!!
    options {
        timestamps()
        timeout(time:15, unit:'MINUTES')
        buildDiscarder(logRotator(
            numToKeepStr: '5',
            daysToKeepStr: '7',
            artifactNumToKeepStr:'30'
        ))
    }

    stages {

        // 1. Clone
        stage('Clone SCM'){
            steps {
                deleteDir()
                checkout scm
            }
        }

        // 2. Build (Docker image)
        stage('Build') {
            steps{
                sh "docker build -t crossyroad ./app/"
            }
        }

        // 3. Run the architecture
        stage('Compose up'){
            steps{
                sh "docker compose down -v"
                sh "docker compose build"
                sh "docker compose up -d"
            }
        }

        // 4. End-to-end test (docker-compose up, POST, GET, DELETE, GET, docker-compose down...) [`master` & `feature/*`]
        stage('E2E test'){
            when { anyOf { 
                branch 'master';
                expression {env.BRANCH_NAME =~ /^feature\/.*/} 
            }}
            steps{
                sh "bash scripts/e2e.sh $JENKINS_URL"
            }
        }

        // 5. Destroy architecture
        stage('Compose down'){
            steps{
                sh "docker compose down -v"
            }
        }

        // 6. Tag [`master` only]
        stage('TAG'){
            when { branch 'master' }
            steps{
                script{
                    withCredentials([gitUsernamePassword(credentialsId: "$GITHUB_CREDS", gitToolName: 'git-tool')]) {
                        sh "git fetch --all --tags"
                        env.oldDIG=sh(returnStdout: true, script: 'git describe --tags | tr "-" "\n" | head -1 || echo 1.0.0').trim()
                        env.newDIG= changeLastChar("$oldDIG")
                        sh "git tag $newDIG"
                        sh "git push --tags"
                        sh "docker tag crossyroad $DOCKERHUB_REPO:$newDIG"
                    }
                }
            }
        }

        // 7. Publish to DockerHub [`master` only]
        stage('Publish') {
            when { branch 'master' }
            steps {
                script{
                    withDockerRegistry([ credentialsId: "$DOCKERHUB_CREDS", url: "" ]) {
                        docker.image("$DOCKERHUB_REPO:$newDIG").push()
                    }
                }
            }
	    }

        // // 8. Deploy [`master` only] (update image tag in production machines)
        // stage('Deploy'){
        //     steps{

        //     }
        // }
     
    }

    post {
        failure {  
                mail bcc: '',
                            body: """<b>Failure</b>
                                <br>Project: ${env.JOB_NAME} 
                                <br>Build Number: ${env.BUILD_NUMBER} 
                                <br> URL de build: ${env.BUILD_URL}""",
                            cc: '',
                            charset: 'UTF-8',
                            from: '',
                            mimeType: 'text/html',
                            replyTo: '', 
                            subject: "ERROR CI: Project name -> ${env.JOB_NAME}",
                            to: sh(returnStdout: true, script: 'git log --format="%ae" | head -1').trim();  
        } 
    }
}