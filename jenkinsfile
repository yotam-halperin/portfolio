pipeline {
    agent any
    
    environment {
        GITHUB_CREDS = 'github'
        ECR_BACKEND_REPO = "644435390668.dkr.ecr.eu-west-2.amazonaws.com/crossyroad-backend"
        ECR_FRONTEND_REPO = "644435390668.dkr.ecr.eu-west-2.amazonaws.com/crossyroad-frontend"
        YH_MYSQL_PASSWORD = "pass"
        YH_MYSQL_HOST = "mysql"
        DEPLOY_REPO = "https://github.com/yotam-halperin/portfolio-charts.git"
    }

    options {
        timestamps()
        timeout(time:15, unit:'MINUTES')
        buildDiscarder(logRotator(
            numToKeepStr: '5',
            daysToKeepStr: '7',
            artifactNumToKeepStr:'30'
        ))
    }

    stages {

        // 1. Clone
        stage('Clone SCM'){
            steps {
                deleteDir()
                checkout scm
            }
        }

        // 2. Build (Docker image)
        stage('Build') {
            steps{
                sh "docker build -t crossy-backend ./app/"
                sh "docker build -t crossy-frontend ./nginx/"
            }
        }

        // 3. Run the architecture
        stage('Compose up'){
            steps{
                sh "docker compose down -v"
                sh "docker compose build"
                sh "docker compose up -d"
            }
        }

        // 4. End-to-end test (docker-compose up, POST, GET, DELETE, GET, docker-compose down...) [`master` & `feature/*`]
        stage('E2E test'){
            when { anyOf { 
                branch 'master';
                expression {env.BRANCH_NAME =~ /^feature\/.*/} 
            }}
            steps{
                sh "bash scripts/e2e.sh $JENKINS_URL"
            }
        }

        // 5. Destroy architecture
        stage('Compose down'){
            steps{
                sh "docker compose down -v"
            }
        }

        // 6. Tag [`master` only]
        stage('TAG'){
            when { branch 'master' }
            steps{
                script{
                    withCredentials([gitUsernamePassword(credentialsId: "$GITHUB_CREDS", gitToolName: 'git-tool')]) {
                        sh "git fetch --all --tags"
                        env.oldDIG=sh(returnStdout: true, script: 'git describe --tags | tr "-" "\n" | head -1 || echo 1.0.0').trim()
                        env.newDIG=sh(returnStdout: true, script: "bash scripts/changeLastChar.sh $oldDIG").trim()
                        sh "git tag $newDIG"
                        sh "git push --tags"
                        sh "docker tag crossy-backend $ECR_BACKEND_REPO:$newDIG"
                        sh "docker tag crossy-frontend $ECR_FRONTEND_REPO:$newDIG"
                    }
                }
            }
        }

        // 7. Publish to ECR [`master` only]
        stage('Publish') {
            when { branch 'master' }
            steps {
                script{
                    docker.withRegistry('https://644435390668.dkr.ecr.eu-west-2.amazonaws.com', 'ecr:eu-west-2:644435390668') {
                        docker.image("$ECR_BACKEND_REPO:$newDIG").push()
                        docker.image("$ECR_FRONTEND_REPO:$newDIG").push()
                    }
                }
            }
	    }

        // 8. Deploy [`master` only]
        stage('Deploy'){
            when { branch 'master' }
            steps{
                script{
                    withCredentials([gitUsernamePassword(credentialsId: "$GITHUB_CREDS", gitToolName: 'git-tool')]) {
                        sh "git clone $DEPLOY_REPO"
                        dir('portfolio-charts') {
                            sh "pwd"
                            sh "sed 's/tag: *.*.*/tag: $newDIG/g' application/values.yaml > ./application/newvalues.yaml"
                            sh "rm application/values.yaml"
                            sh "mv application/newvalues.yaml application/values.yaml"
                            sh "cat application/values.yaml"
                            env.EMAIL=sh(returnStdout: true, script: 'git log --format="%ae" | head -1').trim()
                            sh "echo $EMAIL"
                            sh "git config --global user.email '$EMAIL'"
                            sh "git config --global user.name 'Jenkins'"
                            sh "git add application/values.yaml"
                            sh "git commit -m 'changed image tag to $newDIG'"
                            // sh "git push origin master"
                        }
                    }
                }
            }
        }
     
    }

    post {
        failure {  
                mail bcc: '',
                            body: """<b>Failure</b>
                                <br>Project: ${env.JOB_NAME} 
                                <br>Build Number: ${env.BUILD_NUMBER} 
                                <br> URL de build: ${env.BUILD_URL}""",
                            cc: '',
                            charset: 'UTF-8',
                            from: '',
                            mimeType: 'text/html',
                            replyTo: '', 
                            subject: "ERROR CI: Project name -> ${env.JOB_NAME}",
                            to: sh(returnStdout: true, script: 'git log --format="%ae" | head -1').trim();  
        } 
    }
}